{"version":3,"file":"peppermint-router.cjs.js","sources":["../src/utils.ts","../src/hashRouter.ts","../src/index.ts"],"sourcesContent":["export function removeStart(str: string, ...toRemove: string[]): string {\r\n    return removeSide(str, /^(\\s*[\\r\\n]*)*/, String.prototype.startsWith, ...toRemove);\r\n}\r\n\r\nexport function removeEnd(str: string, ...toRemove: string[]): string {\r\n    return removeSide(str, /(\\s*[\\r\\n]*)*$/, String.prototype.endsWith, ...toRemove);\r\n}\r\n\r\nfunction removeSide(\r\n    str: string,\r\n    whitespaceReplacePattern: RegExp,\r\n    shouldRemove: (trimStr: string) => boolean,\r\n    ...toRemove: string[]\r\n): string {\r\n\r\n    // input validation\r\n    if (typeof str !== \"string\") {\r\n        throw new Error(`Missing arguement '${nameof(str)}'.`);\r\n    }\r\n    if (!toRemove.every(tr => typeof tr === 'string')) {\r\n        throw new Error(`Invalid argument '${toRemove}'. Only strings expected.`);\r\n    }\r\n\r\n    // default behavior: trim white spaces\r\n    if (!toRemove.length) {\r\n        return str.replace(whitespaceReplacePattern, \"\");\r\n    }\r\n\r\n    // trim specified patterns\r\n    let result = str.substring(0);\r\n    let keepRunning = true;\r\n    while (result.length && keepRunning) {\r\n        keepRunning = false;\r\n        for (const trimStr of toRemove) {\r\n            if (!shouldRemove.apply(result, trimStr))\r\n                continue;\r\n            result = result.substring(0, result.length - trimStr.length);\r\n            keepRunning = true;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { IMap } from './types';\r\nimport { removeStart, removeEnd } from './utils';\r\n\r\n// originally based on PathJS: https://github.com/mtrpcic/pathjs\r\n\r\nexport type RouteParams = IMap<string>;\r\n\r\nexport type RouteAction = (params: RouteParams) => void;\r\n\r\nexport type BeforeNavigationHandler = (nextPath: string) => Promise<boolean>;\r\n\r\nexport type BeforeUnloadHandler = () => string;\r\n\r\ninterface Route {\r\n    path: string;\r\n    action: RouteAction;\r\n}\r\n\r\ninterface RouteMatchResult {\r\n    route: Route;\r\n    params: RouteParams;\r\n}\r\n\r\nexport class HashRouter {\r\n\r\n    //\r\n    // public members\r\n    //\r\n\r\n    public fallback: VoidFunction;\r\n    /**\r\n     * Triggered when a navigation inside the application takes place.  \r\n     * Return `false` to cancel navigation.\r\n     */\r\n    public get onBeforeNavigation(): BeforeNavigationHandler {\r\n        return this._onBeforeNavigation;\r\n    }\r\n    public set onBeforeNavigation(value: BeforeNavigationHandler) {\r\n\r\n        // prevent accidental overwrites\r\n        if (value && this._onBeforeNavigation) {\r\n            throw new Error(\r\n                `${nameof(this.onBeforeNavigation)} handler already exists. Remove the old one before assigning a new handler.`\r\n            );\r\n        }\r\n\r\n        this._onBeforeNavigation = value;\r\n    }\r\n    /**\r\n     * Triggered when a navigation to another site takes place.\r\n     * Return a message to show to the user.  \r\n     */\r\n    public get onBeforeUnload(): BeforeUnloadHandler {\r\n        return this._onBeforeUnload;\r\n    }\r\n    public set onBeforeUnload(value: BeforeUnloadHandler) {\r\n\r\n        // prevent accidental overwrites\r\n        if (value && this._onBeforeUnload) {\r\n            throw new Error(\r\n                `${nameof(this.onBeforeUnload)} handler already exists. Remove the old one before assigning a new handler.`\r\n            );\r\n        }\r\n\r\n        this._onBeforeUnload = value;\r\n    }\r\n\r\n    //\r\n    // private members\r\n    //\r\n\r\n    private _onBeforeNavigation: BeforeNavigationHandler;\r\n    private _onBeforeUnload: BeforeUnloadHandler;\r\n    private currentRoute: string;\r\n    private readonly routes: IMap<Route> = {};\r\n\r\n    //\r\n    // public methods\r\n    //\r\n\r\n    public mapPath(path: string, action: RouteAction) {\r\n        path = this.normalizePath(path);\r\n        this.routes[path] = { path, action };\r\n    }\r\n\r\n    public goTo(path: string) {\r\n        path = this.normalizePath(path);\r\n        location.hash = '#/' + path;\r\n    }\r\n\r\n    public goBack() {\r\n        window.history.back();\r\n    }\r\n\r\n    public listen() {\r\n\r\n        // register unload handler\r\n        window.addEventListener('beforeunload', e => {\r\n            const promptMessage = (this.onBeforeUnload ? this.onBeforeUnload() : undefined);\r\n            e.returnValue = promptMessage;\r\n            return promptMessage;\r\n        });\r\n\r\n        // listen to hash changes\r\n        window.addEventListener('hashchange', this.handleHashChanged);\r\n\r\n        // handle initial route\r\n        if (location.hash === '') {\r\n            location.hash = '#/';\r\n\r\n        } else {\r\n            this.handleHashChanged();\r\n        }\r\n    }\r\n\r\n    //\r\n    // private methods\r\n    //\r\n\r\n    private handleHashChanged = async (): Promise<void> => {\r\n        let path = location.hash;\r\n\r\n        // normalize path\r\n        path = this.normalizePath(path);\r\n\r\n        // don't re-navigate to the same page\r\n        if (path === this.currentRoute)\r\n            return;\r\n\r\n        // find the route to active\r\n        const matchResult = this.match(path);\r\n\r\n        // invoke beforeNavigation handler\r\n        if (this.onBeforeNavigation) {\r\n            const nextPath = matchResult && matchResult.route.path;\r\n            const stopNavigation = (await this.onBeforeNavigation(nextPath) === false);\r\n            if (stopNavigation) {\r\n\r\n                // restore location hash\r\n                window.history.replaceState(null, null, this.currentRoute);\r\n                this.goTo(this.currentRoute);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // activate route\r\n        this.currentRoute = path;\r\n        if (matchResult) {\r\n            matchResult.route.action(matchResult.params);\r\n            return;\r\n        }\r\n\r\n        // route fallback\r\n        if (this.fallback) {\r\n            this.fallback();\r\n        }\r\n    };\r\n\r\n    private match(pathToMatch: string): RouteMatchResult {\r\n\r\n        for (const routePath of Object.keys(this.routes)) {\r\n\r\n            const route = this.routes[routePath];\r\n\r\n            // handle route parameters\r\n            const params: IMap<string> = {};\r\n            const routeToMatchParts = pathToMatch.split('/');\r\n            if (routePath.search(/:/) > 0) {\r\n\r\n                const routeParts = routePath.split('/');\r\n\r\n                for (let i = 0; i < routeParts.length; i++) {\r\n\r\n                    // skip non-param parts\r\n                    const paramPart = routeParts[i];\r\n                    if (!paramPart || paramPart[0] !== ':')\r\n                        continue;\r\n\r\n                    // stop if done processing\r\n                    if (i >= routeToMatchParts.length)\r\n                        break;\r\n\r\n                    // store the parameter\r\n                    const paramName = paramPart.slice(1);\r\n                    const paramValue = routeToMatchParts[i];\r\n                    params[paramName] = paramValue;\r\n\r\n                    // normalize the path to match\r\n                    routeToMatchParts[i] = paramPart;\r\n                }\r\n            }\r\n\r\n            // check if match\r\n            const normalizedPathToMatch = routeToMatchParts.join('/');\r\n            if (routePath === normalizedPathToMatch) {\r\n                return {\r\n                    route,\r\n                    params\r\n                };\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private normalizePath(path: string): string {\r\n        path =  (path || '');\r\n        path = removeStart(path, '#', '/');\r\n        path = removeEnd(path, '/');\r\n        return path;\r\n    }\r\n}","import { HashRouter } from './hashRouter';\r\n\r\nconsole.log('Starting router');\r\n\r\nconst router = new HashRouter();\r\nrouter.mapPath('/', () => console.log('Root path'));\r\nrouter.mapPath('home', () => console.log('I am home'));\r\nrouter.mapPath('about', () => console.log('This is me'));\r\nrouter.fallback = () => console.log('404 - Not Found');\r\nrouter.listen();\r\n"],"names":["removeStart","str","toRemove","removeSide","String","prototype","startsWith","removeEnd","endsWith","whitespaceReplacePattern","shouldRemove","Error","every","tr","length","replace","result","substring","keepRunning","trimStr","apply","HashRouter","path","location","hash","normalizePath","currentRoute","matchResult","match","onBeforeNavigation","nextPath","route","stopNavigation","window","history","replaceState","goTo","action","params","fallback","_onBeforeNavigation","value","onBeforeUnload","_onBeforeUnload","mapPath","routes","goBack","back","listen","addEventListener","e","promptMessage","undefined","returnValue","handleHashChanged","pathToMatch","routePath","Object","keys","routeToMatchParts","split","search","routeParts","i","paramPart","paramName","slice","paramValue","normalizedPathToMatch","join","console","log","router"],"mappings":"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"}