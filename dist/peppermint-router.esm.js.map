{"version":3,"file":"peppermint-router.esm.js","sources":["../src/components/RouterContext.tsx","../src/components/Route.tsx","../src/components/RouteFallback.tsx","../src/utils/utils.ts","../src/logic/hashRouter.ts","../src/components/RouterView.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { HashRouter, RouteInfo } from '../logic';\r\n\r\nexport interface RouterContextValue {\r\n    router: HashRouter;\r\n    currentRoute: RouteInfo;\r\n    setCurrentRoute: (route: RouteInfo) => void;\r\n}\r\n\r\nexport const RouterContext = React.createContext<RouterContextValue>(undefined);","import * as React from 'react';\r\nimport { RouteParams } from '../logic';\r\nimport { RouterContext, RouterContextValue } from './RouterContext';\r\n\r\nexport interface RouteProps {\r\n    path: string;\r\n    component: React.ComponentType<any>;\r\n}\r\n\r\nexport class Route extends React.Component<RouteProps> {\r\n\r\n    public render() {\r\n        return (\r\n            <RouterContext.Consumer>\r\n                {this.renderRoute}\r\n            </RouterContext.Consumer>\r\n        );\r\n    }\r\n\r\n    private renderRoute = (context: RouterContextValue) => {\r\n\r\n        this.registerRoute(context);\r\n\r\n        if (this.props.path !== context.currentRoute.path)\r\n            return null;\r\n\r\n        return (\r\n            React.createElement(\r\n                this.props.component,\r\n                {\r\n                    route: context.currentRoute\r\n                }\r\n            )\r\n        );\r\n    };\r\n\r\n    private registerRoute(context: RouterContextValue) {\r\n        context.router.mapPath(this.props.path, (params: RouteParams) => {\r\n            context.setCurrentRoute({\r\n                path: this.props.path,\r\n                params\r\n            });\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport { RouterContext, RouterContextValue } from './RouterContext';\r\n\r\nexport interface RouteFallbackProps {\r\n    component: React.ComponentType<any>;\r\n}\r\n\r\nexport class RouteFallback extends React.Component<RouteFallbackProps> {\r\n\r\n    public render() {\r\n        return (\r\n            <RouterContext.Consumer>\r\n                {this.renderRoute}\r\n            </RouterContext.Consumer>\r\n        );\r\n    }\r\n\r\n    private renderRoute = (context: RouterContextValue) => {\r\n\r\n        this.registerRoute(context);\r\n\r\n        if (context.currentRoute.path !== null)\r\n            return null;\r\n\r\n        return (\r\n            React.createElement(\r\n                this.props.component,\r\n                {\r\n                    route: context.currentRoute\r\n                }\r\n            )\r\n        );\r\n    };\r\n\r\n    private registerRoute(context: RouterContextValue) {\r\n        context.router.fallback = () => context.setCurrentRoute({\r\n            path: null,\r\n            params: null\r\n        });\r\n    }\r\n}","export function removeStart(str: string, ...toRemove: string[]): string {\r\n    return removeSide(\r\n        str,\r\n        /^(\\s*[\\r\\n]*)*/,\r\n        String.prototype.startsWith,\r\n        (s, tr) => s.substring(tr.length),\r\n        ...toRemove\r\n    );\r\n}\r\n\r\nexport function removeEnd(str: string, ...toRemove: string[]): string {\r\n    return removeSide(\r\n        str,\r\n        /(\\s*[\\r\\n]*)*$/,\r\n        String.prototype.endsWith,\r\n        (s, tr) => s.substring(0, s.length - tr.length),\r\n        ...toRemove\r\n    );\r\n}\r\n\r\nfunction removeSide(\r\n    str: string,\r\n    whitespaceReplacePattern: RegExp,\r\n    shouldRemove: (trimStr: string) => boolean,\r\n    remove: (str: string, trimStr: string) => string,\r\n    ...toRemove: string[]\r\n): string {\r\n\r\n    // input validation\r\n    if (typeof str !== \"string\") {\r\n        throw new Error(`Missing arguement '${nameof(str)}'.`);\r\n    }\r\n    if (!toRemove.every(tr => typeof tr === 'string')) {\r\n        throw new Error(`Invalid argument '${toRemove}'. Only strings expected.`);\r\n    }\r\n\r\n    // default behavior: trim white spaces\r\n    if (!toRemove.length) {\r\n        return str.replace(whitespaceReplacePattern, \"\");\r\n    }\r\n\r\n    // trim specified patterns\r\n    let result = str.substring(0);\r\n    let keepRunning = true;\r\n    while (result.length && keepRunning) {\r\n        keepRunning = false;\r\n        for (const trimStr of toRemove) {\r\n            if (!shouldRemove.call(result, trimStr))\r\n                continue;\r\n            result = remove(result, trimStr);\r\n            keepRunning = true;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { IMap, removeEnd, removeStart } from '../utils';\r\n\r\n// originally based on PathJS: https://github.com/mtrpcic/pathjs\r\n\r\nexport type RouteParams = IMap<string>;\r\n\r\nexport interface RouteInfo {\r\n    path: string;\r\n    params: RouteParams;\r\n}\r\n\r\nexport interface BeforeNavigationEvent {\r\n    prevRoute: RouteInfo;\r\n    nextRoute: RouteInfo;\r\n}\r\n\r\nexport type BeforeNavigationHandler = (e: BeforeNavigationEvent) => Promise<boolean>;\r\n\r\nexport interface BeforeUnloadEvent {\r\n    currentRoute: RouteInfo;\r\n}\r\n\r\nexport type BeforeUnloadHandler = (e: BeforeUnloadEvent) => string;\r\n\r\nexport type RouteAction = (params: RouteParams) => void;\r\n\r\ninterface RouteConfig {\r\n    path: string;\r\n    action: RouteAction;\r\n}\r\n\r\ninterface RouteConfigMatchResult {\r\n    route: RouteConfig;\r\n    params: RouteParams;\r\n}\r\n\r\nexport class HashRouter {\r\n\r\n    //\r\n    // public members\r\n    //\r\n\r\n    public fallback: VoidFunction;\r\n    /**\r\n     * Triggered when a navigation inside the application takes place.  \r\n     * Return `false` to cancel navigation.\r\n     */\r\n    public get onBeforeNavigation(): BeforeNavigationHandler {\r\n        return this._onBeforeNavigation;\r\n    }\r\n    public set onBeforeNavigation(value: BeforeNavigationHandler) {\r\n\r\n        // prevent accidental overwrites\r\n        if (value && this._onBeforeNavigation) {\r\n            throw new Error(\r\n                `${nameof(this.onBeforeNavigation)} handler already exists. Remove the old one before assigning a new handler.`\r\n            );\r\n        }\r\n\r\n        this._onBeforeNavigation = value;\r\n    }\r\n    /**\r\n     * Triggered when a navigation to another site takes place.\r\n     * Return a message to show to the user.  \r\n     */\r\n    public get onBeforeUnload(): BeforeUnloadHandler {\r\n        return this._onBeforeUnload;\r\n    }\r\n    public set onBeforeUnload(value: BeforeUnloadHandler) {\r\n\r\n        // prevent accidental overwrites\r\n        if (value && this._onBeforeUnload) {\r\n            throw new Error(\r\n                `${nameof(this.onBeforeUnload)} handler already exists. Remove the old one before assigning a new handler.`\r\n            );\r\n        }\r\n\r\n        this._onBeforeUnload = value;\r\n    }\r\n    public get currentRoute(): RouteInfo {\r\n        return this._currentRoute;\r\n    }\r\n\r\n    //\r\n    // private members\r\n    //\r\n\r\n    private _onBeforeNavigation: BeforeNavigationHandler;\r\n    private _onBeforeUnload: BeforeUnloadHandler;\r\n    private _currentRoute: RouteInfo = ({} as RouteInfo);\r\n    private readonly routes: IMap<RouteConfig> = {};\r\n\r\n    //\r\n    // public methods\r\n    //\r\n\r\n    public mapPath(path: string, action: RouteAction) {\r\n        path = this.normalizePath(path);\r\n        this.routes[path] = { path, action };\r\n    }\r\n\r\n    public goTo(path: string) {\r\n        path = this.normalizePath(path);\r\n        location.hash = '#/' + path;\r\n    }\r\n\r\n    public goBack() {\r\n        window.history.back();\r\n    }\r\n\r\n    public listen() {\r\n\r\n        // register unload handler\r\n        window.addEventListener('beforeunload', e => {\r\n            const promptMessage = (this.onBeforeUnload ?\r\n                this.onBeforeUnload({\r\n                    currentRoute: this.currentRoute\r\n                }) :\r\n                undefined\r\n            );\r\n            if (promptMessage) {\r\n                e.returnValue = promptMessage;\r\n            }\r\n            return promptMessage;\r\n        });\r\n\r\n        // listen to hash changes\r\n        window.addEventListener('hashchange', this.handleHashChanged);\r\n\r\n        // handle initial route\r\n        if (location.hash === '') {\r\n            location.hash = '#/';\r\n\r\n        } else {\r\n            this.handleHashChanged();\r\n        }\r\n    }\r\n\r\n    //\r\n    // private methods\r\n    //\r\n\r\n    private handleHashChanged = async (): Promise<void> => {\r\n        let path = location.hash;\r\n\r\n        // normalize path\r\n        path = this.normalizePath(path);\r\n\r\n        // don't re-navigate to the same page\r\n        if (path === this._currentRoute.path)\r\n            return;\r\n\r\n        // find the route to active\r\n        const matchResult = this.match(path);\r\n        const nextRoute: RouteInfo = {\r\n            path,\r\n            params: (matchResult && matchResult.params) || {}\r\n        };\r\n\r\n        // invoke beforeNavigation handler\r\n        if (this.onBeforeNavigation) {\r\n            const continueNavigation = await this.onBeforeNavigation({\r\n                prevRoute: this.currentRoute,\r\n                nextRoute\r\n            });\r\n            if (continueNavigation === false) {\r\n\r\n                // restore location hash\r\n                window.history.replaceState(null, null, this._currentRoute.path);\r\n                this.goTo(this._currentRoute.path);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // activate route\r\n        this._currentRoute = nextRoute;\r\n        if (matchResult) {\r\n            matchResult.route.action(matchResult.params);\r\n            return;\r\n        }\r\n\r\n        // route fallback\r\n        if (this.fallback) {\r\n            this.fallback();\r\n        }\r\n    };\r\n\r\n    private match(pathToMatch: string): RouteConfigMatchResult {\r\n\r\n        for (const routePath of Object.keys(this.routes)) {\r\n\r\n            const route = this.routes[routePath];\r\n\r\n            // handle route parameters\r\n            const params: IMap<string> = {};\r\n            const routeToMatchParts = pathToMatch.split('/');\r\n            if (routePath.search(/:/) > 0) {\r\n\r\n                const routeParts = routePath.split('/');\r\n\r\n                for (let i = 0; i < routeParts.length; i++) {\r\n\r\n                    // skip non-param parts\r\n                    const paramPart = routeParts[i];\r\n                    if (!paramPart || paramPart[0] !== ':')\r\n                        continue;\r\n\r\n                    // stop if done processing\r\n                    if (i >= routeToMatchParts.length)\r\n                        break;\r\n\r\n                    // store the parameter\r\n                    const paramName = paramPart.slice(1);\r\n                    const paramValue = routeToMatchParts[i];\r\n                    params[paramName] = paramValue;\r\n\r\n                    // normalize the path to match\r\n                    routeToMatchParts[i] = paramPart;\r\n                }\r\n            }\r\n\r\n            // check if match\r\n            const normalizedPathToMatch = routeToMatchParts.join('/');\r\n            if (routePath === normalizedPathToMatch) {\r\n                return {\r\n                    route,\r\n                    params\r\n                };\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private normalizePath(path: string): string {\r\n        path = (path || '');\r\n        path = removeStart(path, '#', '/');\r\n        path = removeEnd(path, '/');\r\n        return path;\r\n    }\r\n}","import * as React from 'react';\r\nimport { HashRouter, RouteInfo } from '../logic';\r\nimport { RouterContext } from './RouterContext';\r\n\r\nexport interface RouterViewProps {\r\n    routerRef?: (router: HashRouter) => void;\r\n}\r\n\r\nclass RouterViewState {\r\n    public currentRoute: RouteInfo = {\r\n        path: undefined,\r\n        params: undefined\r\n    };\r\n}\r\n\r\nexport class RouterView extends React.Component<RouterViewProps, RouterViewState> {\r\n\r\n    private router = new HashRouter();\r\n\r\n    constructor(props: RouterViewProps) {\r\n        super(props);\r\n        this.state = new RouterViewState();\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.router.listen();\r\n    }\r\n\r\n    public render() {\r\n\r\n        if (this.props.routerRef) {\r\n            this.props.routerRef(this.router);\r\n        }\r\n\r\n        return (\r\n            <RouterContext.Provider\r\n                value={{\r\n                    router: this.router,\r\n                    currentRoute: this.state.currentRoute,\r\n                    setCurrentRoute: this.setCurrentRoute\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </RouterContext.Provider>\r\n        );\r\n    }\r\n\r\n    private setCurrentRoute = (currentRoute: RouteInfo) => {\r\n        this.setState({ currentRoute });\r\n    };\r\n}"],"names":["RouterContext","React","undefined","Route","context","registerRoute","props","path","currentRoute","component","route","render","React.createElement","renderRoute","router","mapPath","params","setCurrentRoute","RouteFallback","fallback","removeStart","str","toRemove","removeSide","String","prototype","startsWith","s","tr","substring","length","removeEnd","endsWith","whitespaceReplacePattern","shouldRemove","remove","Error","every","replace","result","keepRunning","trimStr","call","HashRouter","location","hash","normalizePath","_currentRoute","matchResult","match","nextRoute","onBeforeNavigation","continueNavigation","prevRoute","window","history","replaceState","goTo","action","_onBeforeNavigation","value","onBeforeUnload","_onBeforeUnload","routes","goBack","back","listen","addEventListener","e","promptMessage","returnValue","handleHashChanged","pathToMatch","routePath","Object","keys","routeToMatchParts","split","search","routeParts","i","paramPart","paramName","slice","paramValue","normalizedPathToMatch","join","RouterViewState","RouterView","constructor","setState","state","componentDidMount","routerRef","children"],"mappings":";;;MASaA,aAAa;;AAAGC,aAAA,CAAwCC,SAAxC,CAAtB;;ACAA,MAAMC,KAAN,SAAoBF,SAApB,CAAgD;;;;yCAU5BG,OAAD,IAAiC;WAE9CC,aAAL,CAAmBD,OAAnB;UAEI,KAAKE,KAAL,CAAWC,IAAX,KAAoBH,OAAO,CAACI,YAAR,CAAqBD,IAA7C,EACI,OAAO,IAAP;aAGAN,aAAA,CACI,KAAKK,KAAL,CAAWG,SADf,EAEI;QACIC,KAAK,EAAEN,OAAO,CAACI;OAHvB,CADJ;KAjB+C;;;EAE5CG,MAAP,GAAgB;WAERC,cAAC,aAAD,CAAe,QAAf,QACK,KAAKC,WADV,CADJ;;;EAwBIR,aAAR,CAAsBD,OAAtB,EAAmD;IAC/CA,OAAO,CAACU,MAAR,CAAeC,OAAf,CAAuB,KAAKT,KAAL,CAAWC,IAAlC,EAAyCS,MAAD,IAAyB;MAC7DZ,OAAO,CAACa,eAAR,CAAwB;QACpBV,IAAI,EAAE,KAAKD,KAAL,CAAWC,IADG;QAEpBS;OAFJ;KADJ;;;;;AC9BD,MAAME,aAAN,SAA4BjB,SAA5B,CAAgE;;;;yCAU5CG,OAAD,IAAiC;WAE9CC,aAAL,CAAmBD,OAAnB;UAEIA,OAAO,CAACI,YAAR,CAAqBD,IAArB,KAA8B,IAAlC,EACI,OAAO,IAAP;aAGAN,aAAA,CACI,KAAKK,KAAL,CAAWG,SADf,EAEI;QACIC,KAAK,EAAEN,OAAO,CAACI;OAHvB,CADJ;KAjB+D;;;EAE5DG,MAAP,GAAgB;WAERC,cAAC,aAAD,CAAe,QAAf,QACK,KAAKC,WADV,CADJ;;;EAwBIR,aAAR,CAAsBD,OAAtB,EAAmD;IAC/CA,OAAO,CAACU,MAAR,CAAeK,QAAf,GAA0B,MAAMf,OAAO,CAACa,eAAR,CAAwB;MACpDV,IAAI,EAAE,IAD8C;MAEpDS,MAAM,EAAE;KAFoB,CAAhC;;;;;ACnCD,SAASI,WAAT,CAAqBC,GAArB,EAAkC,GAAGC,QAArC,EAAiE;SAC7DC,UAAU,CACbF,GADa,EAEb,gBAFa,EAGbG,MAAM,CAACC,SAAP,CAAiBC,UAHJ,EAIb,CAACC,CAAD,EAAIC,EAAJ,KAAWD,CAAC,CAACE,SAAF,CAAYD,EAAE,CAACE,MAAf,CAJE,EAKb,GAAGR,QALU,CAAjB;;AASJ,AAAO,SAASS,SAAT,CAAmBV,GAAnB,EAAgC,GAAGC,QAAnC,EAA+D;SAC3DC,UAAU,CACbF,GADa,EAEb,gBAFa,EAGbG,MAAM,CAACC,SAAP,CAAiBO,QAHJ,EAIb,CAACL,CAAD,EAAIC,EAAJ,KAAWD,CAAC,CAACE,SAAF,CAAY,CAAZ,EAAeF,CAAC,CAACG,MAAF,GAAWF,EAAE,CAACE,MAA7B,CAJE,EAKb,GAAGR,QALU,CAAjB;;;AASJ,SAASC,UAAT,CACIF,GADJ,EAEIY,wBAFJ,EAGIC,YAHJ,EAIIC,MAJJ,EAKI,GAAGb,QALP,EAMU;;MAGF,OAAOD,GAAP,KAAe,QAAnB,EAA6B;UACnB,IAAIe,KAAJ,CAAW,sBAAD,KAAkC,IAA5C,CAAN;;;MAEA,CAACd,QAAQ,CAACe,KAAT,CAAeT,EAAE,IAAI,OAAOA,EAAP,KAAc,QAAnC,CAAL,EAAmD;UACzC,IAAIQ,KAAJ,CAAW,qBAAoBd,QAAS,2BAAxC,CAAN;GAPE;;;MAWF,CAACA,QAAQ,CAACQ,MAAd,EAAsB;WACXT,GAAG,CAACiB,OAAJ,CAAYL,wBAAZ,EAAsC,EAAtC,CAAP;GAZE;;;MAgBFM,MAAM,GAAGlB,GAAG,CAACQ,SAAJ,CAAc,CAAd,CAAb;MACIW,WAAW,GAAG,IAAlB;;SACOD,MAAM,CAACT,MAAP,IAAiBU,WAAxB,EAAqC;IACjCA,WAAW,GAAG,KAAd;;SACK,MAAMC,OAAX,IAAsBnB,QAAtB,EAAgC;UACxB,CAACY,YAAY,CAACQ,IAAb,CAAkBH,MAAlB,EAA0BE,OAA1B,CAAL,EACI;MACJF,MAAM,GAAGJ,MAAM,CAACI,MAAD,EAASE,OAAT,CAAf;MACAD,WAAW,GAAG,IAAd;;;;SAIDD,MAAP;;;AClBG,MAAMI,UAAN,CAAiB;;;;;;;;2CAqDgB,EArDhB;;oCAsDyB,EAtDzB;;+CA0GQ,YAA2B;UAC/CpC,IAAI,GAAGqC,QAAQ,CAACC,IAApB,CADmD;;MAInDtC,IAAI,GAAG,KAAKuC,aAAL,CAAmBvC,IAAnB,CAAP,CAJmD;;UAO/CA,IAAI,KAAK,KAAKwC,aAAL,CAAmBxC,IAAhC,EACI,OAR+C;;YAW7CyC,WAAW,GAAG,KAAKC,KAAL,CAAW1C,IAAX,CAApB;YACM2C,SAAoB,GAAG;QACzB3C,IADyB;QAEzBS,MAAM,EAAGgC,WAAW,IAAIA,WAAW,CAAChC,MAA5B,IAAuC;OAFnD,CAZmD;;UAkB/C,KAAKmC,kBAAT,EAA6B;cACnBC,kBAAkB,GAAG,MAAM,KAAKD,kBAAL,CAAwB;UACrDE,SAAS,EAAE,KAAK7C,YADqC;UAErD0C;SAF6B,CAAjC;;YAIIE,kBAAkB,KAAK,KAA3B,EAAkC;;UAG9BE,MAAM,CAACC,OAAP,CAAeC,YAAf,CAA4B,IAA5B,EAAkC,IAAlC,EAAwC,KAAKT,aAAL,CAAmBxC,IAA3D;eACKkD,IAAL,CAAU,KAAKV,aAAL,CAAmBxC,IAA7B;;;OA3B2C;;;WAiC9CwC,aAAL,GAAqBG,SAArB;;UACIF,WAAJ,EAAiB;QACbA,WAAW,CAACtC,KAAZ,CAAkBgD,MAAlB,CAAyBV,WAAW,CAAChC,MAArC;;OAnC+C;;;UAwC/C,KAAKG,QAAT,EAAmB;aACVA,QAAL;;KAnJY;;;;;;;MAWTgC,kBAAX,GAAyD;WAC9C,KAAKQ,mBAAZ;;;MAEOR,kBAAX,CAA8BS,KAA9B,EAA8D;;QAGtDA,KAAK,IAAI,KAAKD,mBAAlB,EAAuC;YAC7B,IAAIvB,KAAJ,CACD,GAAD,oBAAmC,6EADjC,CAAN;;;SAKCuB,mBAAL,GAA2BC,KAA3B;;;;;;;;MAMOC,cAAX,GAAiD;WACtC,KAAKC,eAAZ;;;MAEOD,cAAX,CAA0BD,KAA1B,EAAsD;;QAG9CA,KAAK,IAAI,KAAKE,eAAlB,EAAmC;YACzB,IAAI1B,KAAJ,CACD,GAAD,gBAA+B,6EAD7B,CAAN;;;SAKC0B,eAAL,GAAuBF,KAAvB;;;MAEOpD,YAAX,GAAqC;WAC1B,KAAKuC,aAAZ;GA5CgB;;;;;;;;EA4DbhC,OAAP,CAAeR,IAAf,EAA6BmD,MAA7B,EAAkD;IAC9CnD,IAAI,GAAG,KAAKuC,aAAL,CAAmBvC,IAAnB,CAAP;SACKwD,MAAL,CAAYxD,IAAZ,IAAoB;MAAEA,IAAF;MAAQmD;KAA5B;;;EAGGD,IAAP,CAAYlD,IAAZ,EAA0B;IACtBA,IAAI,GAAG,KAAKuC,aAAL,CAAmBvC,IAAnB,CAAP;IACAqC,QAAQ,CAACC,IAAT,GAAgB,OAAOtC,IAAvB;;;EAGGyD,MAAP,GAAgB;IACZV,MAAM,CAACC,OAAP,CAAeU,IAAf;;;EAGGC,MAAP,GAAgB;;IAGZZ,MAAM,CAACa,gBAAP,CAAwB,cAAxB,EAAwCC,CAAC,IAAI;YACnCC,aAAa,GAAI,KAAKR,cAAL,GACnB,KAAKA,cAAL,CAAoB;QAChBrD,YAAY,EAAE,KAAKA;OADvB,CADmB,GAInBN,SAJJ;;UAMImE,aAAJ,EAAmB;QACfD,CAAC,CAACE,WAAF,GAAgBD,aAAhB;;;aAEGA,aAAP;KAVJ,EAHY;;IAiBZf,MAAM,CAACa,gBAAP,CAAwB,YAAxB,EAAsC,KAAKI,iBAA3C,EAjBY;;QAoBR3B,QAAQ,CAACC,IAAT,KAAkB,EAAtB,EAA0B;MACtBD,QAAQ,CAACC,IAAT,GAAgB,IAAhB;KADJ,MAGO;WACE0B,iBAAL;;GAlGY;;;;;EAuJZtB,KAAR,CAAcuB,WAAd,EAA2D;SAElD,MAAMC,SAAX,IAAwBC,MAAM,CAACC,IAAP,CAAY,KAAKZ,MAAjB,CAAxB,EAAkD;YAExCrD,KAAK,GAAG,KAAKqD,MAAL,CAAYU,SAAZ,CAAd,CAF8C;;YAKxCzD,MAAoB,GAAG,EAA7B;YACM4D,iBAAiB,GAAGJ,WAAW,CAACK,KAAZ,CAAkB,GAAlB,CAA1B;;UACIJ,SAAS,CAACK,MAAV,CAAiB,GAAjB,IAAwB,CAA5B,EAA+B;cAErBC,UAAU,GAAGN,SAAS,CAACI,KAAV,CAAgB,GAAhB,CAAnB;;aAEK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACjD,MAA/B,EAAuCkD,CAAC,EAAxC,EAA4C;;gBAGlCC,SAAS,GAAGF,UAAU,CAACC,CAAD,CAA5B;cACI,CAACC,SAAD,IAAcA,SAAS,CAAC,CAAD,CAAT,KAAiB,GAAnC,EACI,SALoC;;cAQpCD,CAAC,IAAIJ,iBAAiB,CAAC9C,MAA3B,EACI,MAToC;;gBAYlCoD,SAAS,GAAGD,SAAS,CAACE,KAAV,CAAgB,CAAhB,CAAlB;gBACMC,UAAU,GAAGR,iBAAiB,CAACI,CAAD,CAApC;UACAhE,MAAM,CAACkE,SAAD,CAAN,GAAoBE,UAApB,CAdwC;;UAiBxCR,iBAAiB,CAACI,CAAD,CAAjB,GAAuBC,SAAvB;;OA5BsC;;;YAiCxCI,qBAAqB,GAAGT,iBAAiB,CAACU,IAAlB,CAAuB,GAAvB,CAA9B;;UACIb,SAAS,KAAKY,qBAAlB,EAAyC;eAC9B;UACH3E,KADG;UAEHM;SAFJ;;;;WAOD,IAAP;;;EAGI8B,aAAR,CAAsBvC,IAAtB,EAA4C;IACxCA,IAAI,GAAIA,IAAI,IAAI,EAAhB;IACAA,IAAI,GAAGa,WAAW,CAACb,IAAD,EAAO,GAAP,EAAY,GAAZ,CAAlB;IACAA,IAAI,GAAGwB,SAAS,CAACxB,IAAD,EAAO,GAAP,CAAhB;WACOA,IAAP;;;;;ACtOR,MAAMgF,eAAN,CAAsB;;0CACe;MAC7BhF,IAAI,EAAEL,SADuB;MAE7Bc,MAAM,EAAEd;KAHM;;;;;AAOtB,AAAO,MAAMsF,UAAN,SAAyBvF,SAAzB,CAA2E;EAI9EwF,WAAW,CAACnF,KAAD,EAAyB;UAC1BA,KAAN;;oCAHa,IAAIqC,UAAJ,EAEmB;;6CA4BTnC,YAAD,IAA6B;WAC9CkF,QAAL,CAAc;QAAElF;OAAhB;KA7BgC;;SAE3BmF,KAAL,GAAa,IAAIJ,eAAJ,EAAb;;;EAGGK,iBAAP,GAA2B;SAClB9E,MAAL,CAAYoD,MAAZ;;;EAGGvD,MAAP,GAAgB;QAER,KAAKL,KAAL,CAAWuF,SAAf,EAA0B;WACjBvF,KAAL,CAAWuF,SAAX,CAAqB,KAAK/E,MAA1B;;;WAIAF,cAAC,aAAD,CAAe,QAAf;MACI,KAAK,EAAE;QACHE,MAAM,EAAE,KAAKA,MADV;QAEHN,YAAY,EAAE,KAAKmF,KAAL,CAAWnF,YAFtB;QAGHS,eAAe,EAAE,KAAKA;;OAGzB,KAAKX,KAAL,CAAWwF,QAPhB,CADJ;;;;;;;"}